{
  "name": "gulp-watch",
  "version": "0.3.4",
  "description": "Watch, that actually is an endless stream",
  "main": "index.js",
  "keywords": [
    "gulp",
    "watch",
    "gulpplugin"
  ],
  "scripts": {
    "test": "istanbul test _mocha --report html -- test/*.js --reporter spec",
    "coveralls": "istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/floatdrop/gulp-watch.git"
  },
  "author": {
    "name": "Vsevolod Strukchinsky"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/floatdrop/gulp-watch/issues"
  },
  "devDependencies": {
    "gulp-mocha": "~0.2.0",
    "mocha": "~1.14.0",
    "coveralls": "~2.6.0",
    "mocha-lcov-reporter": "0.0.1",
    "istanbul": "~0.1.44",
    "gulp-plumber": "~0.2.3",
    "longjohn": "~0.2.2",
    "event-stream": "~3.0.20",
    "gulp-grep-stream": "0.0.1"
  },
  "dependencies": {
    "gulp": "~3",
    "gulp-batch": "~0.3.3",
    "gaze": "~0.4.3",
    "async": "~0.2.9",
    "gulp-util": "~2.2.6"
  },
  "engine": "node >= 0.10",
  "readme": "# [gulp](https://github.com/gulpjs/gulp)-watch [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coverage Status](https://coveralls.io/repos/floatdrop/gulp-watch/badge.png)](https://coveralls.io/r/floatdrop/gulp-watch) [![Dependency Status][depstat-image]][depstat-url]\n> Watch, that actually is an endless stream\n\nThis is implementation of [`gulp.watch`](https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpwatchglob--opts-cb) with endless stream approach. If `gulp.watch` is working for you - stick with it, otherwise you can try `gulp-watch` plugin.\n\nMain reasons of `gulp-watch` existance is that it can easly (with a little help of [`gulp-plumber`](https://github.com/floatdrop/gulp-plumber) achieve per-file rebuilding on file change:\n\n![Awesome demonstration](https://github.com/floatdrop/gulp-watch/raw/master/img/2014-01-09.gif)\n\n## Usage\n\n### Continuous stream of events\n\nThis is usefull, when you want blazingly fast rebuilding per-file.\n\n__Be aware:__ `end` event is never happens in this mode, so plugins dependent on it will never print or do whatever they should do on `end` task.\n\n```js\n// npm i gulp gulp-watch gulp-sass\n\nvar gulp = require('gulp'),\n    watch = require('gulp-watch'),\n    plumber = require('gulp-plumber'),\n    sass = require('gulp-sass');\n\ngulp.task('default', function () {\n    gulp.src('scss/**', { read: false })\n        .pipe(watch())\n        .pipe(plumber()) // This will keeps pipes working after error event\n        .pipe(sass())\n        .pipe(gulp.dest('./dist/'));\n});\n```\n\nIf you want to watch all directories, include those, which will be __created__ after:\n\n```js\ngulp.task('default', function () {\n    watch({ glob: 'sass/**/*.scss' })\n        .pipe(plumber())\n        .pipe(sass())\n        .pipe(gulp.dest('./dist/'));\n});\n```\n\n### Trigger for mocha\n\n[Problem with `gulp.watch`](https://github.com/gulpjs/gulp/issues/80) is that will run your test suit on every changed file per once. To avoid this [`gulp-batch`](https://github.com/floatdrop/gulp-batch) was written first, but after some time it became clear, that `gulp.watch` should be a plugin with event batching abilities.\n\n```js\nvar grep = require('gulp-grep-stream');\nvar mocha = require('gulp-mocha');\n\ngulp.task('watch', function() {\n    gulp.src(['lib/**', 'test/**'], { read: false })\n        .pipe(watch({ emit: 'all' }))\n        .pipe(grep('*/test/*.js'))\n        .pipe(mocha({ reporter: 'spec' }))\n        .on('error', function() {\n            if (!/tests? failed/.test(err.stack)) {\n                console.log(err.stack);\n            }\n        });\n});\n\ngulp.task('default', function () {\n    gulp.run('watch');\n});\n\n// run `gulp watch` or just `gulp` for watching and rerunning tests\n```\n\n## API\n\n### watch([options, callback])\n\nThis function creates have two different modes, that are depends on have you provice callback function, or not. If you do - you get __batched__ mode, if you not - you get __stream__.\n\n### Callback signature: `function(events, [done])`\n\n * `events` - is `Array` of incoming events.\n * `done` - is callback for your function signal to batch, that you are done. This allows to run your callback as soon as previous end.\n\n### Options:\n\nThis object passed to [`gaze` options](https://github.com/shama/gaze#properties) directly, so see documentation there. For __batched__ mode we are using [`gulp-batch`](https://github.com/floatdrop/gulp-batch#api), so options from there are available. And of course options for [`gulp.src`](https://github.com/gulpjs/gulp#gulpsrcglobs-options) used too. If you do not want content from watch, then add `read: false` to options object.\n\n#### options.emit\nType: `String`\nDefault: `one`\n\nThis options defines emit strategy:\n\n * `one` - emit only changed file\n * `all` - emit all watched files (and folders), when one changes\n\n#### options.passThrough\nType: `Boolean`  \nDefault: `true`\n\nThis options will pass vinyl objects, that was piped into `watch` to next Stream in pipeline.\n\n#### options.glob\nType: `String`  \nDefault: `undefined`\n\nIf you want to detect new files, then you have to use this option. When `gulp-watch` gets files from `gulp.src` it looses the information about pattern of matching - therefore it can not detect new files.\n\n#### options.name\nType: `String`  \nDefault: `undefined`\n\nName of the watcher. If it present in options, you will get more readable output:\n\n![Naming watchers](https://github.com/floatdrop/gulp-watch/raw/master/img/naming.png)\n\n__Notes__: \n \n1. you cannot pipe to watcher, that got this option (writable stream will be closed).\n2. you will receive vinyl File object only on changes.\n\n### Methods\n\nReturned Stream from constructor have some useful methods:\n\n * `close()` - calling `gaze.close` and emitting `end`, after `gaze.close` is done.\n\n### Events\n\n * `end` - all files are stop being watched.\n * `ready` - all files, that are passed from `gulp.src`, are now being watched.\n * `error` - when something happened inside callback, you will get notified.\n\n### Properties\n\n * `gaze` - instance of `gaze` in case you want to call it methods (for example `remove`). Be aware __no one guarantee you nothing__ after you hacked on `gaze`.\n\n### Returns\n\n * __Batched mode__  - wrapped callback, that will gather events and call callback.\n * __Stream mode__ - stream, that handles `gulp.src` piping.\n\n# License\n\n(MIT License)\n\nCopyright (c) 2013 Vsevolod Strukchinsky (floatdrop@gmail.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[npm-url]: https://npmjs.org/package/gulp-watch\n[npm-image]: https://badge.fury.io/js/gulp-watch.png\n\n[travis-url]: http://travis-ci.org/floatdrop/gulp-watch\n[travis-image]: https://travis-ci.org/floatdrop/gulp-watch.png?branch=master\n\n[depstat-url]: https://david-dm.org/floatdrop/gulp-watch\n[depstat-image]: https://david-dm.org/floatdrop/gulp-watch.png?theme=shields.io\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/floatdrop/gulp-watch",
  "_id": "gulp-watch@0.3.4",
  "_from": "gulp-watch@~0.3.4"
}
